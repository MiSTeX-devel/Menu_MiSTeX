/* Generated by Yosys 0.17 (git sha1 6f9602b4c, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os) */

module spi_slave(spi_device__sdo, spi_device__sck, spi_device__cs, word_in, word_out, word_complete, clk, rst, spi_device__sdi);
  reg \$auto$verilog_backend.cc:2083:dump_module$10  = 0;
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire [4:0] \$19 ;
  wire [4:0] \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire [4:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$5 ;
  wire \$7 ;
  wire [4:0] \$9 ;
  (* \amaranth.sample_reg  = 32'd1 *)
  reg \$sample$s$serial_clock$sync$1  = 1'h0;
  wire \$sample$s$serial_clock$sync$1$next ;
  reg [3:0] bit_count = 4'h0;
  reg [3:0] \bit_count$next ;
  input clk;
  wire clk;
  reg [15:0] current_rx = 16'h0000;
  reg [15:0] \current_rx$next ;
  reg [15:0] current_tx = 16'h0000;
  reg [15:0] \current_tx$next ;
  reg is_first_bit = 1'h0;
  reg \is_first_bit$next ;
  input rst;
  wire rst;
  wire serial_clock;
  input spi_device__cs;
  wire spi_device__cs;
  input spi_device__sck;
  wire spi_device__sck;
  input spi_device__sdi;
  wire spi_device__sdi;
  output spi_device__sdo;
  reg spi_device__sdo = 1'h0;
  reg \spi_device__sdo$next ;
  reg word_accepted = 1'h0;
  reg \word_accepted$next ;
  output word_complete;
  reg word_complete = 1'h0;
  reg \word_complete$next ;
  output [15:0] word_in;
  reg [15:0] word_in = 16'h0000;
  reg [15:0] \word_in$next ;
  input [15:0] word_out;
  wire [15:0] word_out;
  assign \$9  = bit_count + 1'h1;
  assign \$11  = \$9  == 5'h10;
  assign \$13  = ~ spi_device__cs;
  assign \$17  = \$sample$s$serial_clock$sync$1  & \$15 ;
  assign \$1  = ~ spi_device__sck;
  assign \$20  = bit_count + 1'h1;
  assign \$22  = ~ spi_device__cs;
  assign \$26  = \$sample$s$serial_clock$sync$1  & \$24 ;
  assign \$28  = ~ spi_device__cs;
  assign \$32  = \$sample$s$serial_clock$sync$1  & \$30 ;
  assign \$34  = ~ spi_device__cs;
  assign \$38  = \$sample$s$serial_clock$sync$1  & \$36 ;
  assign \$3  = ~ spi_device__cs;
  assign \$40  = bit_count + 1'h1;
  assign \$42  = \$40  == 5'h10;
  assign \$44  = ~ \$sample$s$serial_clock$sync$1 ;
  assign \$46  = \$44  & serial_clock;
  assign \$7  = \$sample$s$serial_clock$sync$1  & \$5 ;
  always @(posedge clk)
    \$sample$s$serial_clock$sync$1  <= \$1 ;
  always @(posedge clk)
    current_tx <= \current_tx$next ;
  always @(posedge clk)
    spi_device__sdo <= \spi_device__sdo$next ;
  always @(posedge clk)
    current_rx <= \current_rx$next ;
  always @(posedge clk)
    is_first_bit <= \is_first_bit$next ;
  always @(posedge clk)
    bit_count <= \bit_count$next ;
  always @(posedge clk)
    word_accepted <= \word_accepted$next ;
  always @(posedge clk)
    word_complete <= \word_complete$next ;
  always @(posedge clk)
    word_in <= \word_in$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    \word_in$next  = word_in;
    casez (word_accepted)
      1'h1:
          \word_in$next  = current_rx;
    endcase
    casez (rst)
      1'h1:
          \word_in$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    (* full_case = 32'd1 *)
    casez (word_accepted)
      1'h1:
          \word_complete$next  = 1'h1;
      default:
          \word_complete$next  = 1'h0;
    endcase
    casez (rst)
      1'h1:
          \word_complete$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    \word_accepted$next  = 1'h0;
    casez (\$3 )
      1'h1:
          casez (\$7 )
            1'h1:
                casez (\$11 )
                  1'h1:
                      \word_accepted$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \word_accepted$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    \bit_count$next  = bit_count;
    (* full_case = 32'd1 *)
    casez (\$13 )
      1'h1:
          casez (\$17 )
            1'h1:
                \bit_count$next  = \$20 [3:0];
          endcase
      default:
          \bit_count$next  = 4'h0;
    endcase
    casez (rst)
      1'h1:
          \bit_count$next  = 4'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    \is_first_bit$next  = is_first_bit;
    (* full_case = 32'd1 *)
    casez (\$22 )
      1'h1:
          casez (\$26 )
            1'h1:
                \is_first_bit$next  = 1'h0;
          endcase
      default:
          \is_first_bit$next  = 1'h1;
    endcase
    casez (rst)
      1'h1:
          \is_first_bit$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    \current_rx$next  = current_rx;
    casez (\$28 )
      1'h1:
          casez (\$32 )
            1'h1:
                \current_rx$next  = { current_rx[14:0], spi_device__sdi };
          endcase
    endcase
    casez (rst)
      1'h1:
          \current_rx$next  = 16'h0000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$10 ) begin end
    \current_tx$next  = current_tx;
    \spi_device__sdo$next  = spi_device__sdo;
    (* full_case = 32'd1 *)
    casez (\$34 )
      1'h1:
        begin
          casez (\$38 )
            1'h1:
                casez (\$42 )
                  1'h1:
                      \current_tx$next  = word_out;
                endcase
          endcase
          casez (\$46 )
            1'h1:
                { \spi_device__sdo$next , \current_tx$next [15:1] } = current_tx;
          endcase
        end
      default:
          \current_tx$next  = word_out;
    endcase
    casez (rst)
      1'h1:
        begin
          \current_tx$next  = 16'h0000;
          \spi_device__sdo$next  = 1'h0;
        end
    endcase
  end
  assign \$19  = \$20 ;
  assign \$sample$s$serial_clock$sync$1$next  = serial_clock;
  assign serial_clock = \$1 ;
  assign \$5  = spi_device__sck;
  assign \$15  = spi_device__sck;
  assign \$24  = spi_device__sck;
  assign \$30  = spi_device__sck;
  assign \$36  = spi_device__sck;
endmodule
